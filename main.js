(()=>{"use strict";let t=(t=21)=>{let e="",s=crypto.getRandomValues(new Uint8Array(t));for(;t--;){let n=63&s[t];e+=n<36?n.toString(36):n<62?(n-26).toString(36).toUpperCase():n<63?"_":"-"}return e};class e{constructor(t,e){if(!(t instanceof HTMLElement))throw new Error("This is not HTML element!");if("string"!=typeof e)throw new Error("Pass the string");this.container=t,this.nameColumn=e}static markup(t){return`\n      <div class="tasks-container" data-id-column="${t}">\n        <div class="tasks-header">\n            <h3 class="tasks-title">${t}</h3>\n        </div>\n        <div class="tasks-content">\n        <ul class="task-items"></ul>\n        </div>\n        <div class="tasks-footer">\n            <div class="tasks-add-card">\n                <button>+ <span>Add another card<span></button>\n            </div>\n            <form class="add-task hidden">\n              <div class="wrapper-input">\n               <input type="text" class="add-task-input" placeholder="Enter a title for this card..."/>\n              </div>               \n              <button class="add-task-newcard btn btn-primary">Add Card</button>\n              <button class="add-task-delete"><span></span></button>\n            </form>\n        </div>\n      </div>      \n    `}bindToDOM(){this.container.insertAdjacentHTML("beforeend",this.constructor.markup(this.nameColumn))}}class s{constructor(t){this.container=t}static markup(t,e,s){return`\n      <li class="card" data-type="${e}" data-id="${s}">\n        <div class="card-header">\n          <h4>${t}</h4>\n          <button class="card-delete hidden"><span></span></button>\n        </div>\n      </li>  \n    `}createCard({title:t,type:e,id:s}){this.container.insertAdjacentHTML("beforeend",this.constructor.markup(t,e,s))}}class n{getCards(){return JSON.parse(localStorage.getItem("cards"))||[]}saveCards(t){localStorage.setItem("cards",JSON.stringify(t))}}const a=document.querySelector("#root");new class{constructor(t){if(!(t instanceof HTMLDivElement))throw new Error("This is not HTML element!");this.container=t,this.state=[],this.stateService=new n}init(){this.bindToDOM(),this.toDoColumn=new e(this.boardContainer,"todo"),this.toDoColumn.bindToDOM(),this.inProgressColumn=new e(this.boardContainer,"in-progress"),this.inProgressColumn.bindToDOM(),this.doneColumn=new e(this.boardContainer,"done"),this.doneColumn.bindToDOM(),this.state=this.stateService.getCards(),this.loadState(this.state),this.registerEvents()}static get markup(){return'\n      <div class="board"></div>\n    '}get boardContainer(){return this.container.querySelector(".board")}bindToDOM(){this.container.insertAdjacentHTML("beforeend",this.constructor.markup)}registerEvents(){const t=document.querySelectorAll("ul"),e=this.container.querySelectorAll(".task-items"),s=this.container.querySelectorAll(".add-task");t.forEach((t=>{t.addEventListener("mouseover",(t=>{"LI"===t.target.tagName&&this.showDeleteButton(t)})),t.addEventListener("mouseout",(t=>{t.relatedTarget.classList.contains("card-header")||"SPAN"===t.relatedTarget.tagName||"LI"===t.target.tagName&&this.hideDeleteButton(t)}))})),this.container.addEventListener("mousedown",(t=>{const{target:e}=t;"SPAN"!==e.tagName&&e.closest("li")&&this.onMouseDown(t)})),this.container.addEventListener("mouseup",(t=>this.onMouseUp(t))),this.container.addEventListener("mousemove",(t=>this.onMouseMove(t))),e.forEach((t=>t.addEventListener("click",(t=>{const{target:e}=t;(e.classList.contains("card-delete")||"SPAN"===e.tagName)&&this.deleteCard(t)})))),s.forEach((t=>t.addEventListener("submit",(t=>{this.createNewCard(t),this.onClickCloseAddCard(t)}))));const n=this.boardContainer.querySelectorAll(".tasks-add-card button"),a=this.boardContainer.querySelectorAll(".add-task-delete");n.forEach((t=>t.addEventListener("click",(t=>this.onClickAddNewCard(t))))),a.forEach((t=>t.addEventListener("click",(t=>this.onClickCloseAddCard(t)))))}onMouseDown(t){t.preventDefault(),document.body.style.cursor="grabbing";const e=t.target.closest("li");this.cloneElement=e.cloneNode(!0);const{width:s,height:n,left:a,top:r}=e.getBoundingClientRect();this.cloneElement.classList.add("dragged"),this.cloneElement.style.width=`${s}px`,this.cloneElement.style.height=`${n}px`,document.body.appendChild(this.cloneElement),this.coordX=t.clientX-a,this.coordY=t.clientY-r,this.cloneElement.style.top=`${r}px`,this.cloneElement.style.left=`${a}px`,this.currentElement=e,this.currentElement.classList.add("hidden")}onMouseMove(t){t.preventDefault(),this.cloneElement&&(this.cloneElement.style.left=t.pageX-this.coordX+"px",this.cloneElement.style.top=t.pageY-this.coordY+"px")}onMouseUp(t){if(t.preventDefault(),document.body.style.cursor="default",!this.currentElement||!this.cloneElement)return;const e=document.elementFromPoint(t.clientX,t.clientY).closest("li"),s=t.target.closest(".tasks-container");if(!s)return this.cloneElement.remove(),void this.currentElement.classList.remove("hidden");const n=s.querySelector(".task-items");this.currentElement.dataset.type=s.dataset.idColumn,n.insertBefore(this.currentElement,e);this.state.find((t=>t.id===this.currentElement.dataset.id)).type=this.currentElement.dataset.type,this.stateService.saveCards(this.state),this.currentElement.classList.remove("hidden"),this.cloneElement.remove(),this.cloneElement=null}onClickAddNewCard(t){const e=t.currentTarget.closest(".tasks-container"),s=e.querySelector(".tasks-add-card"),n=e.querySelector(".add-task");s.classList.toggle("hidden"),n.classList.toggle("hidden")}onClickCloseAddCard(t){t.preventDefault();const e=t.currentTarget.closest(".tasks-container"),s=e.querySelector(".tasks-add-card"),n=e.querySelector(".add-task");s.classList.toggle("hidden"),n.classList.toggle("hidden")}deleteCard(t){const e=t.target.closest("li"),s=this.state.findIndex((t=>t.id===e.dataset.id));this.state.splice(s,1),this.stateService.saveCards(this.state),e.remove()}createNewCard(e){e.preventDefault();const{currentTarget:n}=e,a=n.closest(".tasks-container"),r=a.querySelector(".task-items"),i=n[0].value,o=new s(r),d={title:i,type:a.dataset.idColumn,id:t()};o.createCard(d),this.state.push(d),this.stateService.saveCards(this.state),n[0].value=""}loadState(t){t.forEach((t=>{const e=this.container.querySelector(`.tasks-container[data-id-column="${t.type}"]`).querySelector(".task-items");new s(e).createCard(t)}))}showDeleteButton(t){t.target.querySelector("button").classList.remove("hidden")}hideDeleteButton(t){t.target.querySelector("button").classList.add("hidden")}}(a).init()})();